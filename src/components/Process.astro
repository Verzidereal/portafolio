---
type Step = {
  id: string;
  title: string;
  description: string;
  deliverables?: string[];
  time?: string; // ej. "~2–3 días"
  icon?: "search" | "doc" | "ui" | "code" | "rocket" | "support";
};

const { phone = "522291311673", calendly = "" } = Astro.props;

// Puedes editar/ordenar estas fases a tu gusto:
const steps: Step[] = [
  {
    id: "descubrimiento",
    title: "1) Descubrimiento",
    description:
      "Entiendo objetivos, público, referencias y contenidos. Definimos alcance y éxito.",
    deliverables: ["Llamada inicial", "Brief de proyecto", "Mapa de secciones"],
    time: "~1 día",
    icon: "search",
  },
  {
    id: "propuesta",
    title: "2) Propuesta / Alcance",
    description:
      "Te comparto la solución, tiempos y costo. Ajustamos según prioridades.",
    deliverables: ["Propuesta PDF", "Cronograma estimado", "Alcance cerrado"],
    time: "~1 día",
    icon: "doc",
  },
  {
    id: "diseno",
    title: "3) Diseño UI",
    description:
      "Armamos estructura y componentes. Microinteracciones y look & feel.",
    deliverables: ["Wireframe / mockup", "Paleta/tipografía", "Animaciones clave"],
    time: "~2–4 días",
    icon: "ui",
  },
  {
    id: "desarrollo",
    title: "4) Desarrollo",
    description:
      "Implementación con Astro + React + Tailwind. Rendimiento y accesibilidad.",
    deliverables: ["Código en GitHub", "Integraciones (WhatsApp/Calendly)", "Pruebas"],
    time: "~3–7 días",
    icon: "code",
  },
  {
    id: "lanzamiento",
    title: "5) Lanzamiento",
    description:
      "Deploy en Cloudflare Pages y conexión de dominio. SEO básico y métricas.",
    deliverables: ["Dominio y SSL", "Analytics", "Checklist SEO/OG"],
    time: "~1 día",
    icon: "rocket",
  },
  {
    id: "soporte",
    title: "6) Soporte",
    description:
      "Ajustes menores, monitoreo y mejoras continuas según plan de mantenimiento.",
    deliverables: ["Actualizaciones", "Backups", "Soporte por WhatsApp"],
    time: "Mensual",
    icon: "support",
  },
];

function wa() {
  const msg = `Hola, me interesa trabajar contigo. ¿Podemos agendar una llamada?`;
  return `https://wa.me/${phone}?text=${encodeURIComponent(msg)}`;
}

/** OJO: JSX requiere camelCase en atributos SVG */
function Icon({ name }: { name: Step["icon"] }) {
  switch (name) {
    case "search":
      return <path strokeWidth="2" d="M21 21l-4.3-4.3M10 18a8 8 0 1 1 0-16 8 8 0 0 1 0 16z" />;
    case "doc":
      return <path strokeWidth="2" d="M14 2H6a2 2 0 0 0-2 2v16l4-4h8a2 2 0 0 0 2-2V6z" />;
    case "ui":
      return <path strokeWidth="2" d="M3 7h18M3 12h10M3 17h7" />;
    case "code":
      return <path strokeWidth="2" d="M8 16l-4-4 4-4M16 8l4 4-4 4" />;
    case "rocket":
      return <path strokeWidth="2" d="M5 13l4 4M19 5c-4 1-7 4-8 8l-4 4c4-1 7-4 8-8l4-4z" />;
    case "support":
      return <path strokeWidth="2" d="M6 18v-3a6 6 0 1 1 12 0v3M9 18v1a3 3 0 0 0 6 0v-1" />;
    default:
      return null;
  }
}
---

<section id="proceso" class="py-10 md:py-14">
  <h2 class="text-xl sm:text-2xl font-semibold mb-4 sm:mb-6">Proceso de trabajo</h2>

  <ol class="relative border-s border-white/10 ps-6 space-y-6">
    {steps.map((s) => (
      <li class="relative">
        <!-- nodo -->
        <span class="absolute -start-3 top-1.5 flex h-6 w-6 items-center justify-center rounded-full bg-accent/20 border border-accent/40 text-accent">
          <svg viewBox="0 0 24 24" class="h-4 w-4" fill="none" stroke="currentColor" aria-hidden="true">
            <Icon name={s.icon} />
          </svg>
        </span>

        <article class="card">
          <header class="flex flex-wrap items-center justify-between gap-3">
            <h3 class="text-lg font-semibold">{s.title}</h3>
            {s.time && <span class="chip">{s.time}</span>}
          </header>

          <p class="mt-2 text-zinc-300">{s.description}</p>

          {s.deliverables && s.deliverables.length > 0 && (
            <ul class="mt-4 grid gap-2 text-zinc-300 sm:grid-cols-2">
              {s.deliverables.map((d) => (
                <li class="flex items-start gap-2">
                  <svg viewBox="0 0 24 24" class="h-5 w-5 text-accent" fill="none" stroke="currentColor" aria-hidden="true">
                    <path stroke-width="2" d="M5 12l5 5L20 7" />
                  </svg>
                  <span>{d}</span>
                </li>
              ))}
            </ul>
          )}
        </article>
      </li>
    ))}
  </ol>

  <!-- CTA final -->
  <div class="mt-6 flex flex-col sm:flex-row gap-3">
    <a href={wa()} target="_blank" rel="noopener noreferrer" class="btn text-center">Empezar por WhatsApp</a>
    {calendly && (
      <a href={calendly} target="_blank" rel="noopener noreferrer" class="btn-outline text-center">
        Agendar llamada
      </a>
    )}
  </div>
</section>
